<?php
/**
 * Code Owner: CCIntegration Inc. S.P.I.D.E.R framework
 * Modified date: 11/3/2015
 * Modified by: Duy Huynh
 */

namespace Gem\DuyGenerationBundle\Command;


use Sensio\Bundle\GeneratorBundle\Manipulator\KernelManipulator;
use Sensio\Bundle\GeneratorBundle\Manipulator\RoutingManipulator;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\HttpKernel\KernelInterface;

class SfUpdateBundleCommand extends DuyGenerator{
    protected function configure()
    {
        // TODO: Change the autogenerated stub
        $this->setName("duy:updatebundle")
            ->addOption("ns", null, InputOption::VALUE_REQUIRED, "Namespace of bundle")
            ->addOption("b", null,InputOption::VALUE_REQUIRED, "Bundle name")
            ->addArgument("fm", InputArgument::OPTIONAL, "Configuration format");
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $namespace = $input->getOption("ns");
        $bundle = $input->getOption("b");
        $format = $input->getArgument("fm")?$input->getArgument("fm"):"yml";

        //Register an bundle into Symfony kernel.
        $this->updateKernel($input, $output, $namespace, $bundle);

        $this->updateRouting($input, $output, $bundle, $format);
    }

    /**
     * note: this function has copy and modified from Sensio\Bundle\GeneratorBundle\Command\GenerateBundleCommand
     * @param InputInterface $input
     * @param OutputInterface $output
     * @param KernelInterface $kernel
     * @param $namespace
     * @param $bundle
     * @return array
     */
    protected function updateKernel(InputInterface $input, OutputInterface $output, $namespace, $bundle)
    {
        $auto = true;
        $questionHelper = $this->getQuestionHelper();
        $kernel = $this->getContainer()->get("kernel");

        if ($input->isInteractive()) {
            $question = new ConfirmationQuestion($questionHelper->getQuestion('Confirm automatic update of your Kernel', 'yes', '?'), true);
            $auto = $questionHelper->ask($input, $output, $question);
        }

        $output->write('Enabling the bundle inside the Kernel: ');
        $manip = new KernelManipulator($kernel);
        try {
            $ret = $auto ? $manip->addBundle($namespace . '\\' . $bundle) : false;

            if (!$ret) {
                $reflected = new \ReflectionObject($kernel);

                return array(
                    sprintf('- Edit <comment>%s</comment>', $reflected->getFilename()),
                    '  and add the following bundle in the <comment>AppKernel::registerBundles()</comment> method:',
                    '',
                    sprintf('    <comment>new %s(),</comment>', $namespace . '\\' . $bundle),
                    '',
                );
            }
        } catch (\RuntimeException $e) {
            return array(
                sprintf('Bundle <comment>%s</comment> is already defined in <comment>AppKernel::registerBundles()</comment>.', $namespace . '\\' . $bundle),
                '',
            );
        }
    }


    /**
     * note: this function has copied and modified from Sensio\Bundle\GeneratorBundle\Command\GenerateBundleCommand
     * @param InputInterface $input
     * @param OutputInterface $output
     * @param $bundle
     * @param $format
     * @return array
     */
    protected function updateRouting(InputInterface $input, OutputInterface $output, $bundle, $format)
    {
        $auto = true;
        $questionHelper = $this->getQuestionHelper();
        if ($input->isInteractive()) {
            $question = new ConfirmationQuestion($questionHelper->getQuestion('Confirm automatic update of the Routing', 'yes', '?'), true);
            $auto = $questionHelper->ask($input, $output, $question);
        }

        $output->write('Importing the bundle routing resource: ');
        $routing = new RoutingManipulator($this->getContainer()->getParameter('kernel.root_dir').'/config/routing.yml');
        try {
            $ret = $auto ? $routing->addResource($bundle, $format) : true;
            if (!$ret) {
                if ('annotation' === $format) {
                    $help = sprintf("        <comment>resource: \"@%s/Controller/\"</comment>\n        <comment>type:     annotation</comment>\n", $bundle);
                } else {
                    $help = sprintf("        <comment>resource: \"@%s/Resources/config/routing.%s\"</comment>\n", $bundle, $format);
                }
                $help .= "        <comment>prefix:   /</comment>\n";

                return array(
                    '- Import the bundle\'s routing resource in the app main routing file:',
                    '',
                    sprintf('    <comment>%s:</comment>', $bundle),
                    $help,
                    '',
                );
            }
        } catch (\RuntimeException $e) {
            return array(
                sprintf('Bundle <comment>%s</comment> is already imported.', $bundle),
                '',
            );
        }
    }
}